// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendService.proto

#include "FriendService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ik_FriendService {
PROTOBUF_CONSTEXPR UserInfoRequest::UserInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoRequestDefaultTypeInternal() {}
  union {
    UserInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR UserInfoReponse::UserInfoReponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoReponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoReponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoReponseDefaultTypeInternal() {}
  union {
    UserInfoReponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoReponseDefaultTypeInternal _UserInfoReponse_default_instance_;
PROTOBUF_CONSTEXPR FriendInfo::FriendInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendInfoDefaultTypeInternal() {}
  union {
    FriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
PROTOBUF_CONSTEXPR FriendListRequest::FriendListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendListRequestDefaultTypeInternal() {}
  union {
    FriendListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
PROTOBUF_CONSTEXPR FriendListResponse::FriendListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friends_)*/{}
  , /*decltype(_impl_.is_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendListResponseDefaultTypeInternal() {}
  union {
    FriendListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
PROTOBUF_CONSTEXPR AddFriendRequest::AddFriendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.myid_)*/0
  , /*decltype(_impl_.friendid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFriendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendRequestDefaultTypeInternal() {}
  union {
    AddFriendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteFriendRequest::DeleteFriendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.myid_)*/0
  , /*decltype(_impl_.friendid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteFriendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteFriendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteFriendRequestDefaultTypeInternal() {}
  union {
    DeleteFriendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
}  // namespace ik_FriendService
static ::_pb::Metadata file_level_metadata_FriendService_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FriendService_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_FriendService_2eproto[1];

const uint32_t TableStruct_FriendService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::UserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::UserInfoRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::UserInfoReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::UserInfoReponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::UserInfoReponse, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendInfo, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendListRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendListResponse, _impl_.is_success_),
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::FriendListResponse, _impl_.friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::AddFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::AddFriendRequest, _impl_.myid_),
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::AddFriendRequest, _impl_.friendid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::DeleteFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::DeleteFriendRequest, _impl_.myid_),
  PROTOBUF_FIELD_OFFSET(::ik_FriendService::DeleteFriendRequest, _impl_.friendid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ik_FriendService::UserInfoRequest)},
  { 7, -1, -1, sizeof(::ik_FriendService::UserInfoReponse)},
  { 15, -1, -1, sizeof(::ik_FriendService::FriendInfo)},
  { 23, -1, -1, sizeof(::ik_FriendService::FriendListRequest)},
  { 30, -1, -1, sizeof(::ik_FriendService::FriendListResponse)},
  { 38, -1, -1, sizeof(::ik_FriendService::AddFriendRequest)},
  { 46, -1, -1, sizeof(::ik_FriendService::DeleteFriendRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ik_FriendService::_UserInfoRequest_default_instance_._instance,
  &::ik_FriendService::_UserInfoReponse_default_instance_._instance,
  &::ik_FriendService::_FriendInfo_default_instance_._instance,
  &::ik_FriendService::_FriendListRequest_default_instance_._instance,
  &::ik_FriendService::_FriendListResponse_default_instance_._instance,
  &::ik_FriendService::_AddFriendRequest_default_instance_._instance,
  &::ik_FriendService::_DeleteFriendRequest_default_instance_._instance,
};

const char descriptor_table_protodef_FriendService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023FriendService.proto\022\020ik_FriendService\032"
  "\033google/protobuf/empty.proto\"\035\n\017UserInfo"
  "Request\022\n\n\002id\030\001 \001(\005\"+\n\017UserInfoReponse\022\n"
  "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"&\n\nFriendInfo\022\n"
  "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"\037\n\021FriendListRe"
  "quest\022\n\n\002id\030\001 \001(\005\"W\n\022FriendListResponse\022"
  "\022\n\nis_success\030\001 \001(\010\022-\n\007friends\030\002 \003(\0132\034.i"
  "k_FriendService.FriendInfo\"2\n\020AddFriendR"
  "equest\022\014\n\004myid\030\001 \001(\005\022\020\n\010friendid\030\002 \001(\005\"5"
  "\n\023DeleteFriendRequest\022\014\n\004myid\030\001 \001(\005\022\020\n\010f"
  "riendid\030\002 \001(\0052\333\002\n\020FriendServiceRpc\022Z\n\rGe"
  "tFriendList\022#.ik_FriendService.FriendLis"
  "tRequest\032$.ik_FriendService.FriendListRe"
  "sponse\022S\n\013GetUserInfo\022!.ik_FriendService"
  ".UserInfoRequest\032!.ik_FriendService.User"
  "InfoReponse\022G\n\tAddFriend\022\".ik_FriendServ"
  "ice.AddFriendRequest\032\026.google.protobuf.E"
  "mpty\022M\n\014DeleteFriend\022%.ik_FriendService."
  "DeleteFriendRequest\032\026.google.protobuf.Em"
  "ptyB\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FriendService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_FriendService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FriendService_2eproto = {
    false, false, 776, descriptor_table_protodef_FriendService_2eproto,
    "FriendService.proto",
    &descriptor_table_FriendService_2eproto_once, descriptor_table_FriendService_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_FriendService_2eproto::offsets,
    file_level_metadata_FriendService_2eproto, file_level_enum_descriptors_FriendService_2eproto,
    file_level_service_descriptors_FriendService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FriendService_2eproto_getter() {
  return &descriptor_table_FriendService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FriendService_2eproto(&descriptor_table_FriendService_2eproto);
namespace ik_FriendService {

// ===================================================================

class UserInfoRequest::_Internal {
 public:
};

UserInfoRequest::UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.UserInfoRequest)
}
UserInfoRequest::UserInfoRequest(const UserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.UserInfoRequest)
}

inline void UserInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserInfoRequest::~UserInfoRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.UserInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.UserInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.UserInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.UserInfoRequest)
  return target;
}

size_t UserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.UserInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoRequest::GetClassData() const { return &_class_data_; }


void UserInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfoRequest*>(&to_msg);
  auto& from = static_cast<const UserInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.UserInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoRequest::CopyFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRequest::IsInitialized() const {
  return true;
}

void UserInfoRequest::InternalSwap(UserInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[0]);
}

// ===================================================================

class UserInfoReponse::_Internal {
 public:
};

UserInfoReponse::UserInfoReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.UserInfoReponse)
}
UserInfoReponse::UserInfoReponse(const UserInfoReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfoReponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.UserInfoReponse)
}

inline void UserInfoReponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfoReponse::~UserInfoReponse() {
  // @@protoc_insertion_point(destructor:ik_FriendService.UserInfoReponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UserInfoReponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.UserInfoReponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoReponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoReponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.UserInfoReponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.UserInfoReponse)
  return target;
}

size_t UserInfoReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.UserInfoReponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoReponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoReponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoReponse::GetClassData() const { return &_class_data_; }


void UserInfoReponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfoReponse*>(&to_msg);
  auto& from = static_cast<const UserInfoReponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.UserInfoReponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoReponse::CopyFrom(const UserInfoReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.UserInfoReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReponse::IsInitialized() const {
  return true;
}

void UserInfoReponse::InternalSwap(UserInfoReponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoReponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[1]);
}

// ===================================================================

class FriendInfo::_Internal {
 public:
};

FriendInfo::FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendInfo)
}

inline void FriendInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void FriendInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendInfo::GetClassData() const { return &_class_data_; }


void FriendInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendInfo*>(&to_msg);
  auto& from = static_cast<const FriendInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[2]);
}

// ===================================================================

class FriendListRequest::_Internal {
 public:
};

FriendListRequest::FriendListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.FriendListRequest)
}
FriendListRequest::FriendListRequest(const FriendListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendListRequest)
}

inline void FriendListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendListRequest::~FriendListRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendListRequest)
  return target;
}

size_t FriendListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendListRequest::GetClassData() const { return &_class_data_; }


void FriendListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendListRequest*>(&to_msg);
  auto& from = static_cast<const FriendListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendListRequest::CopyFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequest::IsInitialized() const {
  return true;
}

void FriendListRequest::InternalSwap(FriendListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[3]);
}

// ===================================================================

class FriendListResponse::_Internal {
 public:
};

FriendListResponse::FriendListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.FriendListResponse)
}
FriendListResponse::FriendListResponse(const FriendListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){from._impl_.friends_}
    , decltype(_impl_.is_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_success_ = from._impl_.is_success_;
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendListResponse)
}

inline void FriendListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){arena}
    , decltype(_impl_.is_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendListResponse::~FriendListResponse() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friends_.~RepeatedPtrField();
}

void FriendListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friends_.Clear();
  _impl_.is_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ik_FriendService.FriendInfo friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  // repeated .ik_FriendService.FriendInfo friends = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friends_size()); i < n; i++) {
    const auto& repfield = this->_internal_friends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendListResponse)
  return target;
}

size_t FriendListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ik_FriendService.FriendInfo friends = 2;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->_impl_.friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendListResponse::GetClassData() const { return &_class_data_; }


void FriendListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendListResponse*>(&to_msg);
  auto& from = static_cast<const FriendListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friends_.MergeFrom(from._impl_.friends_);
  if (from._internal_is_success() != 0) {
    _this->_internal_set_is_success(from._internal_is_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendListResponse::CopyFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse::IsInitialized() const {
  return true;
}

void FriendListResponse::InternalSwap(FriendListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friends_.InternalSwap(&other->_impl_.friends_);
  swap(_impl_.is_success_, other->_impl_.is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[4]);
}

// ===================================================================

class AddFriendRequest::_Internal {
 public:
};

AddFriendRequest::AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.AddFriendRequest)
}
AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFriendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.myid_){}
    , decltype(_impl_.friendid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.myid_, &from._impl_.myid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friendid_) -
    reinterpret_cast<char*>(&_impl_.myid_)) + sizeof(_impl_.friendid_));
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.AddFriendRequest)
}

inline void AddFriendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.myid_){0}
    , decltype(_impl_.friendid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.AddFriendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddFriendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.AddFriendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.myid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.friendid_) -
      reinterpret_cast<char*>(&_impl_.myid_)) + sizeof(_impl_.friendid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.myid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 friendid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.AddFriendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->_internal_myid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_myid(), target);
  }

  // int32 friendid = 2;
  if (this->_internal_friendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.AddFriendRequest)
  return target;
}

size_t AddFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.AddFriendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->_internal_myid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_myid());
  }

  // int32 friendid = 2;
  if (this->_internal_friendid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_friendid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFriendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriendRequest::GetClassData() const { return &_class_data_; }


void AddFriendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFriendRequest*>(&to_msg);
  auto& from = static_cast<const AddFriendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_myid() != 0) {
    _this->_internal_set_myid(from._internal_myid());
  }
  if (from._internal_friendid() != 0) {
    _this->_internal_set_friendid(from._internal_friendid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  return true;
}

void AddFriendRequest::InternalSwap(AddFriendRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriendRequest, _impl_.friendid_)
      + sizeof(AddFriendRequest::_impl_.friendid_)
      - PROTOBUF_FIELD_OFFSET(AddFriendRequest, _impl_.myid_)>(
          reinterpret_cast<char*>(&_impl_.myid_),
          reinterpret_cast<char*>(&other->_impl_.myid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[5]);
}

// ===================================================================

class DeleteFriendRequest::_Internal {
 public:
};

DeleteFriendRequest::DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_FriendService.DeleteFriendRequest)
}
DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteFriendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.myid_){}
    , decltype(_impl_.friendid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.myid_, &from._impl_.myid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friendid_) -
    reinterpret_cast<char*>(&_impl_.myid_)) + sizeof(_impl_.friendid_));
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.DeleteFriendRequest)
}

inline void DeleteFriendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.myid_){0}
    , decltype(_impl_.friendid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.DeleteFriendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.DeleteFriendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.myid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.friendid_) -
      reinterpret_cast<char*>(&_impl_.myid_)) + sizeof(_impl_.friendid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFriendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.myid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 friendid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteFriendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.DeleteFriendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->_internal_myid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_myid(), target);
  }

  // int32 friendid = 2;
  if (this->_internal_friendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.DeleteFriendRequest)
  return target;
}

size_t DeleteFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.DeleteFriendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->_internal_myid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_myid());
  }

  // int32 friendid = 2;
  if (this->_internal_friendid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_friendid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteFriendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteFriendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteFriendRequest::GetClassData() const { return &_class_data_; }


void DeleteFriendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteFriendRequest*>(&to_msg);
  auto& from = static_cast<const DeleteFriendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.DeleteFriendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_myid() != 0) {
    _this->_internal_set_myid(from._internal_myid());
  }
  if (from._internal_friendid() != 0) {
    _this->_internal_set_friendid(from._internal_friendid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  return true;
}

void DeleteFriendRequest::InternalSwap(DeleteFriendRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteFriendRequest, _impl_.friendid_)
      + sizeof(DeleteFriendRequest::_impl_.friendid_)
      - PROTOBUF_FIELD_OFFSET(DeleteFriendRequest, _impl_.myid_)>(
          reinterpret_cast<char*>(&_impl_.myid_),
          reinterpret_cast<char*>(&other->_impl_.myid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FriendService_2eproto_getter, &descriptor_table_FriendService_2eproto_once,
      file_level_metadata_FriendService_2eproto[6]);
}

// ===================================================================

FriendServiceRpc::~FriendServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FriendService_2eproto);
  return file_level_service_descriptors_FriendService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::GetDescriptor() {
  return descriptor();
}

void FriendServiceRpc::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_FriendService::FriendListRequest*,
                         ::ik_FriendService::FriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendServiceRpc::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_FriendService::UserInfoRequest*,
                         ::ik_FriendService::UserInfoReponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void FriendServiceRpc::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_FriendService::AddFriendRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_FriendService::DeleteFriendRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_FriendService_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_FriendService::FriendListRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ik_FriendService::FriendListResponse*>(
                 response),
             done);
      break;
    case 1:
      GetUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_FriendService::UserInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ik_FriendService::UserInfoReponse*>(
                 response),
             done);
      break;
    case 2:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_FriendService::AddFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 3:
      DeleteFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_FriendService::DeleteFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_FriendService::FriendListRequest::default_instance();
    case 1:
      return ::ik_FriendService::UserInfoRequest::default_instance();
    case 2:
      return ::ik_FriendService::AddFriendRequest::default_instance();
    case 3:
      return ::ik_FriendService::DeleteFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_FriendService::FriendListResponse::default_instance();
    case 1:
      return ::ik_FriendService::UserInfoReponse::default_instance();
    case 2:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 3:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendServiceRpc_Stub::FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendServiceRpc_Stub::FriendServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendServiceRpc_Stub::~FriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendServiceRpc_Stub::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_FriendService::FriendListRequest* request,
                              ::ik_FriendService::FriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_FriendService::UserInfoRequest* request,
                              ::ik_FriendService::UserInfoReponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_FriendService::AddFriendRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_FriendService::DeleteFriendRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ik_FriendService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ik_FriendService::UserInfoRequest*
Arena::CreateMaybeMessage< ::ik_FriendService::UserInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::UserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::UserInfoReponse*
Arena::CreateMaybeMessage< ::ik_FriendService::UserInfoReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::UserInfoReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::FriendInfo*
Arena::CreateMaybeMessage< ::ik_FriendService::FriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::FriendListRequest*
Arena::CreateMaybeMessage< ::ik_FriendService::FriendListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::FriendListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::FriendListResponse*
Arena::CreateMaybeMessage< ::ik_FriendService::FriendListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::FriendListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::AddFriendRequest*
Arena::CreateMaybeMessage< ::ik_FriendService::AddFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::AddFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_FriendService::DeleteFriendRequest*
Arena::CreateMaybeMessage< ::ik_FriendService::DeleteFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_FriendService::DeleteFriendRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
