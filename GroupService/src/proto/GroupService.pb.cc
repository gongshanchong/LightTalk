// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupService.proto

#include "GroupService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ik_ChatService {
PROTOBUF_CONSTEXPR AddGroupRequest::AddGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddGroupRequestDefaultTypeInternal() {}
  union {
    AddGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateGroupRequest::CreateGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGroupRequestDefaultTypeInternal() {}
  union {
    CreateGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateGroupResponse::CreateGroupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grouid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGroupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGroupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGroupResponseDefaultTypeInternal() {}
  union {
    CreateGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
PROTOBUF_CONSTEXPR QuitGroupRequest::QuitGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_.groupid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuitGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuitGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuitGroupRequestDefaultTypeInternal() {}
  union {
    QuitGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuitGroupRequestDefaultTypeInternal _QuitGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR GetGroupUsersRequest::GetGroupUsersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetGroupUsersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGroupUsersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGroupUsersRequestDefaultTypeInternal() {}
  union {
    GetGroupUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGroupUsersRequestDefaultTypeInternal _GetGroupUsersRequest_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR GetGroupUsersResponse::GetGroupUsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetGroupUsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGroupUsersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGroupUsersResponseDefaultTypeInternal() {}
  union {
    GetGroupUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGroupUsersResponseDefaultTypeInternal _GetGroupUsersResponse_default_instance_;
}  // namespace ik_ChatService
static ::_pb::Metadata file_level_metadata_GroupService_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GroupService_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_GroupService_2eproto[1];

const uint32_t TableStruct_GroupService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::AddGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::AddGroupRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::AddGroupRequest, _impl_.group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::CreateGroupRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::CreateGroupRequest, _impl_.group_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::CreateGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::CreateGroupResponse, _impl_.grouid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::QuitGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::QuitGroupRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::QuitGroupRequest, _impl_.groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::GetGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::GetGroupUsersRequest, _impl_.group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::UserInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::UserInfo, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::GetGroupUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_ChatService::GetGroupUsersResponse, _impl_.users_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ik_ChatService::AddGroupRequest)},
  { 8, -1, -1, sizeof(::ik_ChatService::CreateGroupRequest)},
  { 16, -1, -1, sizeof(::ik_ChatService::CreateGroupResponse)},
  { 23, -1, -1, sizeof(::ik_ChatService::QuitGroupRequest)},
  { 31, -1, -1, sizeof(::ik_ChatService::GetGroupUsersRequest)},
  { 38, -1, -1, sizeof(::ik_ChatService::UserInfo)},
  { 46, -1, -1, sizeof(::ik_ChatService::GetGroupUsersResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ik_ChatService::_AddGroupRequest_default_instance_._instance,
  &::ik_ChatService::_CreateGroupRequest_default_instance_._instance,
  &::ik_ChatService::_CreateGroupResponse_default_instance_._instance,
  &::ik_ChatService::_QuitGroupRequest_default_instance_._instance,
  &::ik_ChatService::_GetGroupUsersRequest_default_instance_._instance,
  &::ik_ChatService::_UserInfo_default_instance_._instance,
  &::ik_ChatService::_GetGroupUsersResponse_default_instance_._instance,
};

const char descriptor_table_protodef_GroupService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022GroupService.proto\022\016ik_ChatService\032\033go"
  "ogle/protobuf/empty.proto\"3\n\017AddGroupReq"
  "uest\022\016\n\006userid\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\"8"
  "\n\022CreateGroupRequest\022\016\n\006userid\030\001 \001(\005\022\022\n\n"
  "group_name\030\002 \001(\014\"%\n\023CreateGroupResponse\022"
  "\016\n\006grouid\030\001 \001(\005\"3\n\020QuitGroupRequest\022\016\n\006u"
  "serid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\"(\n\024GetGroup"
  "UsersRequest\022\020\n\010group_id\030\001 \001(\005\"$\n\010UserIn"
  "fo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"@\n\025GetGroup"
  "UsersResponse\022\'\n\005users\030\001 \003(\0132\030.ik_ChatSe"
  "rvice.UserInfo2\323\002\n\017GroupServiceRpc\022C\n\010Ad"
  "dGroup\022\037.ik_ChatService.AddGroupRequest\032"
  "\026.google.protobuf.Empty\022V\n\013CreateGroup\022\""
  ".ik_ChatService.CreateGroupRequest\032#.ik_"
  "ChatService.CreateGroupResponse\022E\n\tQuitG"
  "roup\022 .ik_ChatService.QuitGroupRequest\032\026"
  ".google.protobuf.Empty\022\\\n\rGetGroupUsers\022"
  "$.ik_ChatService.GetGroupUsersRequest\032%."
  "ik_ChatService.GetGroupUsersResponseB\003\200\001"
  "\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_GroupService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_GroupService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GroupService_2eproto = {
    false, false, 769, descriptor_table_protodef_GroupService_2eproto,
    "GroupService.proto",
    &descriptor_table_GroupService_2eproto_once, descriptor_table_GroupService_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_GroupService_2eproto::offsets,
    file_level_metadata_GroupService_2eproto, file_level_enum_descriptors_GroupService_2eproto,
    file_level_service_descriptors_GroupService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GroupService_2eproto_getter() {
  return &descriptor_table_GroupService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GroupService_2eproto(&descriptor_table_GroupService_2eproto);
namespace ik_ChatService {

// ===================================================================

class AddGroupRequest::_Internal {
 public:
};

AddGroupRequest::AddGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.AddGroupRequest)
}
AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.AddGroupRequest)
}

inline void AddGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){0}
    , decltype(_impl_.group_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_ChatService.AddGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.AddGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.AddGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.AddGroupRequest)
  return target;
}

size_t AddGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.AddGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddGroupRequest::GetClassData() const { return &_class_data_; }


void AddGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddGroupRequest*>(&to_msg);
  auto& from = static_cast<const AddGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  return true;
}

void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGroupRequest, _impl_.group_id_)
      + sizeof(AddGroupRequest::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(AddGroupRequest, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[0]);
}

// ===================================================================

class CreateGroupRequest::_Internal {
 public:
};

CreateGroupRequest::CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_name_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.CreateGroupRequest)
}

inline void CreateGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_name_){}
    , decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_ChatService.CreateGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_name_.Destroy();
}

void CreateGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.CreateGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_name_.ClearToEmpty();
  _impl_.userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.CreateGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // bytes group_name = 2;
  if (!this->_internal_group_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.CreateGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes group_name = 2;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_group_name());
  }

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGroupRequest::GetClassData() const { return &_class_data_; }


void CreateGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGroupRequest*>(&to_msg);
  auto& from = static_cast<const CreateGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group_name().empty()) {
    _this->_internal_set_group_name(from._internal_group_name());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[1]);
}

// ===================================================================

class CreateGroupResponse::_Internal {
 public:
};

CreateGroupResponse::CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.CreateGroupResponse)
}
CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGroupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grouid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grouid_ = from._impl_.grouid_;
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.CreateGroupResponse)
}

inline void CreateGroupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grouid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:ik_ChatService.CreateGroupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateGroupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.CreateGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGroupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grouid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grouid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.CreateGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grouid = 1;
  if (this->_internal_grouid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grouid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.CreateGroupResponse)
  return target;
}

size_t CreateGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.CreateGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grouid = 1;
  if (this->_internal_grouid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grouid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGroupResponse::GetClassData() const { return &_class_data_; }


void CreateGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGroupResponse*>(&to_msg);
  auto& from = static_cast<const CreateGroupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.CreateGroupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grouid() != 0) {
    _this->_internal_set_grouid(from._internal_grouid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {
  return true;
}

void CreateGroupResponse::InternalSwap(CreateGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grouid_, other->_impl_.grouid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[2]);
}

// ===================================================================

class QuitGroupRequest::_Internal {
 public:
};

QuitGroupRequest::QuitGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.QuitGroupRequest)
}
QuitGroupRequest::QuitGroupRequest(const QuitGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuitGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.groupid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupid_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.groupid_));
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.QuitGroupRequest)
}

inline void QuitGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){0}
    , decltype(_impl_.groupid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuitGroupRequest::~QuitGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_ChatService.QuitGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuitGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuitGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuitGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.QuitGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupid_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.QuitGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // int32 groupid = 2;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.QuitGroupRequest)
  return target;
}

size_t QuitGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.QuitGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  // int32 groupid = 2;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuitGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitGroupRequest::GetClassData() const { return &_class_data_; }


void QuitGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuitGroupRequest*>(&to_msg);
  auto& from = static_cast<const QuitGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.QuitGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitGroupRequest::CopyFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRequest::IsInitialized() const {
  return true;
}

void QuitGroupRequest::InternalSwap(QuitGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuitGroupRequest, _impl_.groupid_)
      + sizeof(QuitGroupRequest::_impl_.groupid_)
      - PROTOBUF_FIELD_OFFSET(QuitGroupRequest, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[3]);
}

// ===================================================================

class GetGroupUsersRequest::_Internal {
 public:
};

GetGroupUsersRequest::GetGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.GetGroupUsersRequest)
}
GetGroupUsersRequest::GetGroupUsersRequest(const GetGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetGroupUsersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.GetGroupUsersRequest)
}

inline void GetGroupUsersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetGroupUsersRequest::~GetGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:ik_ChatService.GetGroupUsersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetGroupUsersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.GetGroupUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGroupUsersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetGroupUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.GetGroupUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.GetGroupUsersRequest)
  return target;
}

size_t GetGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.GetGroupUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGroupUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetGroupUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGroupUsersRequest::GetClassData() const { return &_class_data_; }


void GetGroupUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetGroupUsersRequest*>(&to_msg);
  auto& from = static_cast<const GetGroupUsersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.GetGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetGroupUsersRequest::CopyFrom(const GetGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.GetGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUsersRequest::IsInitialized() const {
  return true;
}

void GetGroupUsersRequest::InternalSwap(GetGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGroupUsersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[4]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:ik_ChatService.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[5]);
}

// ===================================================================

class GetGroupUsersResponse::_Internal {
 public:
};

GetGroupUsersResponse::GetGroupUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_ChatService.GetGroupUsersResponse)
}
GetGroupUsersResponse::GetGroupUsersResponse(const GetGroupUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetGroupUsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){from._impl_.users_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ik_ChatService.GetGroupUsersResponse)
}

inline void GetGroupUsersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetGroupUsersResponse::~GetGroupUsersResponse() {
  // @@protoc_insertion_point(destructor:ik_ChatService.GetGroupUsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetGroupUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_.~RepeatedPtrField();
}

void GetGroupUsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetGroupUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_ChatService.GetGroupUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGroupUsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ik_ChatService.UserInfo users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetGroupUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_ChatService.GetGroupUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ik_ChatService.UserInfo users = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_ChatService.GetGroupUsersResponse)
  return target;
}

size_t GetGroupUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_ChatService.GetGroupUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ik_ChatService.UserInfo users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGroupUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetGroupUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGroupUsersResponse::GetClassData() const { return &_class_data_; }


void GetGroupUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetGroupUsersResponse*>(&to_msg);
  auto& from = static_cast<const GetGroupUsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_ChatService.GetGroupUsersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetGroupUsersResponse::CopyFrom(const GetGroupUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_ChatService.GetGroupUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUsersResponse::IsInitialized() const {
  return true;
}

void GetGroupUsersResponse::InternalSwap(GetGroupUsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGroupUsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupService_2eproto_getter, &descriptor_table_GroupService_2eproto_once,
      file_level_metadata_GroupService_2eproto[6]);
}

// ===================================================================

GroupServiceRpc::~GroupServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GroupService_2eproto);
  return file_level_service_descriptors_GroupService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::GetDescriptor() {
  return descriptor();
}

void GroupServiceRpc::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_ChatService::AddGroupRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_ChatService::CreateGroupRequest*,
                         ::ik_ChatService::CreateGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_ChatService::QuitGroupRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::GetGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ik_ChatService::GetGroupUsersRequest*,
                         ::ik_ChatService::GetGroupUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroupUsers() not implemented.");
  done->Run();
}

void GroupServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_GroupService_2eproto[0]);
  switch(method->index()) {
    case 0:
      AddGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_ChatService::AddGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 1:
      CreateGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_ChatService::CreateGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ik_ChatService::CreateGroupResponse*>(
                 response),
             done);
      break;
    case 2:
      QuitGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_ChatService::QuitGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 3:
      GetGroupUsers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ik_ChatService::GetGroupUsersRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ik_ChatService::GetGroupUsersResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_ChatService::AddGroupRequest::default_instance();
    case 1:
      return ::ik_ChatService::CreateGroupRequest::default_instance();
    case 2:
      return ::ik_ChatService::QuitGroupRequest::default_instance();
    case 3:
      return ::ik_ChatService::GetGroupUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 1:
      return ::ik_ChatService::CreateGroupResponse::default_instance();
    case 2:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 3:
      return ::ik_ChatService::GetGroupUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GroupServiceRpc_Stub::GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GroupServiceRpc_Stub::GroupServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GroupServiceRpc_Stub::~GroupServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void GroupServiceRpc_Stub::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_ChatService::AddGroupRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_ChatService::CreateGroupRequest* request,
                              ::ik_ChatService::CreateGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_ChatService::QuitGroupRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::GetGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ik_ChatService::GetGroupUsersRequest* request,
                              ::ik_ChatService::GetGroupUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ik_ChatService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ik_ChatService::AddGroupRequest*
Arena::CreateMaybeMessage< ::ik_ChatService::AddGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::AddGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::CreateGroupRequest*
Arena::CreateMaybeMessage< ::ik_ChatService::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::CreateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::CreateGroupResponse*
Arena::CreateMaybeMessage< ::ik_ChatService::CreateGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::CreateGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::QuitGroupRequest*
Arena::CreateMaybeMessage< ::ik_ChatService::QuitGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::QuitGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::GetGroupUsersRequest*
Arena::CreateMaybeMessage< ::ik_ChatService::GetGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::GetGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::UserInfo*
Arena::CreateMaybeMessage< ::ik_ChatService::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_ChatService::GetGroupUsersResponse*
Arena::CreateMaybeMessage< ::ik_ChatService::GetGroupUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_ChatService::GetGroupUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
