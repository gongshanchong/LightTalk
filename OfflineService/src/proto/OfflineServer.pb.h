// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OfflineServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OfflineServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OfflineServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OfflineServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OfflineServer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OfflineServer_2eproto;
namespace ik_OfflineServer {
class ReadOfflineRequest;
struct ReadOfflineRequestDefaultTypeInternal;
extern ReadOfflineRequestDefaultTypeInternal _ReadOfflineRequest_default_instance_;
class ReadOfflineResponse;
struct ReadOfflineResponseDefaultTypeInternal;
extern ReadOfflineResponseDefaultTypeInternal _ReadOfflineResponse_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class WriteOfflineRequest;
struct WriteOfflineRequestDefaultTypeInternal;
extern WriteOfflineRequestDefaultTypeInternal _WriteOfflineRequest_default_instance_;
}  // namespace ik_OfflineServer
PROTOBUF_NAMESPACE_OPEN
template<> ::ik_OfflineServer::ReadOfflineRequest* Arena::CreateMaybeMessage<::ik_OfflineServer::ReadOfflineRequest>(Arena*);
template<> ::ik_OfflineServer::ReadOfflineResponse* Arena::CreateMaybeMessage<::ik_OfflineServer::ReadOfflineResponse>(Arena*);
template<> ::ik_OfflineServer::Request* Arena::CreateMaybeMessage<::ik_OfflineServer::Request>(Arena*);
template<> ::ik_OfflineServer::WriteOfflineRequest* Arena::CreateMaybeMessage<::ik_OfflineServer::WriteOfflineRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ik_OfflineServer {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_OfflineServer.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRequestMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes request_msg = 2;
  void clear_request_msg();
  const std::string& request_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_msg();
  PROTOBUF_NODISCARD std::string* release_request_msg();
  void set_allocated_request_msg(std::string* request_msg);
  private:
  const std::string& _internal_request_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_msg(const std::string& value);
  std::string* _internal_mutable_request_msg();
  public:

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class WriteOfflineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.WriteOfflineRequest) */ {
 public:
  inline WriteOfflineRequest() : WriteOfflineRequest(nullptr) {}
  ~WriteOfflineRequest() override;
  explicit PROTOBUF_CONSTEXPR WriteOfflineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteOfflineRequest(const WriteOfflineRequest& from);
  WriteOfflineRequest(WriteOfflineRequest&& from) noexcept
    : WriteOfflineRequest() {
    *this = ::std::move(from);
  }

  inline WriteOfflineRequest& operator=(const WriteOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOfflineRequest& operator=(WriteOfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteOfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const WriteOfflineRequest*>(
               &_WriteOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteOfflineRequest& a, WriteOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteOfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteOfflineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteOfflineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteOfflineRequest& from) {
    WriteOfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOfflineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_OfflineServer.WriteOfflineRequest";
  }
  protected:
  explicit WriteOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kFriendIdFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 friend_id = 1;
  void clear_friend_id();
  int32_t friend_id() const;
  void set_friend_id(int32_t value);
  private:
  int32_t _internal_friend_id() const;
  void _internal_set_friend_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.WriteOfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t friend_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.ReadOfflineRequest) */ {
 public:
  inline ReadOfflineRequest() : ReadOfflineRequest(nullptr) {}
  ~ReadOfflineRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadOfflineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOfflineRequest(const ReadOfflineRequest& from);
  ReadOfflineRequest(ReadOfflineRequest&& from) noexcept
    : ReadOfflineRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineRequest& operator=(const ReadOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineRequest& operator=(ReadOfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineRequest*>(
               &_ReadOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadOfflineRequest& a, ReadOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOfflineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOfflineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadOfflineRequest& from) {
    ReadOfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_OfflineServer.ReadOfflineRequest";
  }
  protected:
  explicit ReadOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyidFieldNumber = 1,
  };
  // int32 myid = 1;
  void clear_myid();
  int32_t myid() const;
  void set_myid(int32_t value);
  private:
  int32_t _internal_myid() const;
  void _internal_set_myid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.ReadOfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t myid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.ReadOfflineResponse) */ {
 public:
  inline ReadOfflineResponse() : ReadOfflineResponse(nullptr) {}
  ~ReadOfflineResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadOfflineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOfflineResponse(const ReadOfflineResponse& from);
  ReadOfflineResponse(ReadOfflineResponse&& from) noexcept
    : ReadOfflineResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineResponse& operator=(const ReadOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineResponse& operator=(ReadOfflineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOfflineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineResponse*>(
               &_ReadOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadOfflineResponse& a, ReadOfflineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOfflineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOfflineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOfflineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOfflineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadOfflineResponse& from) {
    ReadOfflineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_OfflineServer.ReadOfflineResponse";
  }
  protected:
  explicit ReadOfflineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // repeated bytes msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  const std::string& msg(int index) const;
  std::string* mutable_msg(int index);
  void set_msg(int index, const std::string& value);
  void set_msg(int index, std::string&& value);
  void set_msg(int index, const char* value);
  void set_msg(int index, const void* value, size_t size);
  std::string* add_msg();
  void add_msg(const std::string& value);
  void add_msg(std::string&& value);
  void add_msg(const char* value);
  void add_msg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg();
  private:
  const std::string& _internal_msg(int index) const;
  std::string* _internal_add_msg();
  public:

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.ReadOfflineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// bytes type = 1;
inline void Request::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ik_OfflineServer.Request.type)
}
inline std::string* Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.Request.type)
  return _s;
}
inline const std::string& Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.Request.type)
  return _impl_.type_.Release();
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.Request.type)
}

// bytes request_msg = 2;
inline void Request::clear_request_msg() {
  _impl_.request_msg_.ClearToEmpty();
}
inline const std::string& Request::request_msg() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.Request.request_msg)
  return _internal_request_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_request_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ik_OfflineServer.Request.request_msg)
}
inline std::string* Request::mutable_request_msg() {
  std::string* _s = _internal_mutable_request_msg();
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.Request.request_msg)
  return _s;
}
inline const std::string& Request::_internal_request_msg() const {
  return _impl_.request_msg_.Get();
}
inline void Request::_internal_set_request_msg(const std::string& value) {
  
  _impl_.request_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_request_msg() {
  
  return _impl_.request_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_request_msg() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.Request.request_msg)
  return _impl_.request_msg_.Release();
}
inline void Request::set_allocated_request_msg(std::string* request_msg) {
  if (request_msg != nullptr) {
    
  } else {
    
  }
  _impl_.request_msg_.SetAllocated(request_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_msg_.IsDefault()) {
    _impl_.request_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.Request.request_msg)
}

// -------------------------------------------------------------------

// WriteOfflineRequest

// int32 friend_id = 1;
inline void WriteOfflineRequest::clear_friend_id() {
  _impl_.friend_id_ = 0;
}
inline int32_t WriteOfflineRequest::_internal_friend_id() const {
  return _impl_.friend_id_;
}
inline int32_t WriteOfflineRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.WriteOfflineRequest.friend_id)
  return _internal_friend_id();
}
inline void WriteOfflineRequest::_internal_set_friend_id(int32_t value) {
  
  _impl_.friend_id_ = value;
}
inline void WriteOfflineRequest::set_friend_id(int32_t value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.WriteOfflineRequest.friend_id)
}

// bytes msg = 2;
inline void WriteOfflineRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& WriteOfflineRequest::msg() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.WriteOfflineRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteOfflineRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ik_OfflineServer.WriteOfflineRequest.msg)
}
inline std::string* WriteOfflineRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.WriteOfflineRequest.msg)
  return _s;
}
inline const std::string& WriteOfflineRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void WriteOfflineRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteOfflineRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteOfflineRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.WriteOfflineRequest.msg)
  return _impl_.msg_.Release();
}
inline void WriteOfflineRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.WriteOfflineRequest.msg)
}

// -------------------------------------------------------------------

// ReadOfflineRequest

// int32 myid = 1;
inline void ReadOfflineRequest::clear_myid() {
  _impl_.myid_ = 0;
}
inline int32_t ReadOfflineRequest::_internal_myid() const {
  return _impl_.myid_;
}
inline int32_t ReadOfflineRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.ReadOfflineRequest.myid)
  return _internal_myid();
}
inline void ReadOfflineRequest::_internal_set_myid(int32_t value) {
  
  _impl_.myid_ = value;
}
inline void ReadOfflineRequest::set_myid(int32_t value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineRequest.myid)
}

// -------------------------------------------------------------------

// ReadOfflineResponse

// repeated bytes msg = 1;
inline int ReadOfflineResponse::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int ReadOfflineResponse::msg_size() const {
  return _internal_msg_size();
}
inline void ReadOfflineResponse::clear_msg() {
  _impl_.msg_.Clear();
}
inline std::string* ReadOfflineResponse::add_msg() {
  std::string* _s = _internal_add_msg();
  // @@protoc_insertion_point(field_add_mutable:ik_OfflineServer.ReadOfflineResponse.msg)
  return _s;
}
inline const std::string& ReadOfflineResponse::_internal_msg(int index) const {
  return _impl_.msg_.Get(index);
}
inline const std::string& ReadOfflineResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.ReadOfflineResponse.msg)
  return _internal_msg(index);
}
inline std::string* ReadOfflineResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.ReadOfflineResponse.msg)
  return _impl_.msg_.Mutable(index);
}
inline void ReadOfflineResponse::set_msg(int index, const std::string& value) {
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, std::string&& value) {
  _impl_.msg_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const void* value, size_t size) {
  _impl_.msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline std::string* ReadOfflineResponse::_internal_add_msg() {
  return _impl_.msg_.Add();
}
inline void ReadOfflineResponse::add_msg(const std::string& value) {
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(std::string&& value) {
  _impl_.msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const void* value, size_t size) {
  _impl_.msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadOfflineResponse::msg() const {
  // @@protoc_insertion_point(field_list:ik_OfflineServer.ReadOfflineResponse.msg)
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadOfflineResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ik_OfflineServer.ReadOfflineResponse.msg)
  return &_impl_.msg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_OfflineServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OfflineServer_2eproto
