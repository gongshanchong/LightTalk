// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FriendService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FriendService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FriendService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FriendService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FriendService_2eproto;
namespace ik_FriendService {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class DeleteFriendRequest;
struct DeleteFriendRequestDefaultTypeInternal;
extern DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendListRequest;
struct FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListResponse;
struct FriendListResponseDefaultTypeInternal;
extern FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
class UserInfoReponse;
struct UserInfoReponseDefaultTypeInternal;
extern UserInfoReponseDefaultTypeInternal _UserInfoReponse_default_instance_;
class UserInfoRequest;
struct UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
}  // namespace ik_FriendService
PROTOBUF_NAMESPACE_OPEN
template<> ::ik_FriendService::AddFriendRequest* Arena::CreateMaybeMessage<::ik_FriendService::AddFriendRequest>(Arena*);
template<> ::ik_FriendService::DeleteFriendRequest* Arena::CreateMaybeMessage<::ik_FriendService::DeleteFriendRequest>(Arena*);
template<> ::ik_FriendService::FriendInfo* Arena::CreateMaybeMessage<::ik_FriendService::FriendInfo>(Arena*);
template<> ::ik_FriendService::FriendListRequest* Arena::CreateMaybeMessage<::ik_FriendService::FriendListRequest>(Arena*);
template<> ::ik_FriendService::FriendListResponse* Arena::CreateMaybeMessage<::ik_FriendService::FriendListResponse>(Arena*);
template<> ::ik_FriendService::UserInfoReponse* Arena::CreateMaybeMessage<::ik_FriendService::UserInfoReponse>(Arena*);
template<> ::ik_FriendService::UserInfoRequest* Arena::CreateMaybeMessage<::ik_FriendService::UserInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ik_FriendService {

// ===================================================================

class UserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {}
  ~UserInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR UserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoRequest& from) {
    UserInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoReponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.UserInfoReponse) */ {
 public:
  inline UserInfoReponse() : UserInfoReponse(nullptr) {}
  ~UserInfoReponse() override;
  explicit PROTOBUF_CONSTEXPR UserInfoReponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoReponse(const UserInfoReponse& from);
  UserInfoReponse(UserInfoReponse&& from) noexcept
    : UserInfoReponse() {
    *this = ::std::move(from);
  }

  inline UserInfoReponse& operator=(const UserInfoReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoReponse& operator=(UserInfoReponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoReponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoReponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoReponse*>(
               &_UserInfoReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfoReponse& a, UserInfoReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoReponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoReponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoReponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoReponse& from) {
    UserInfoReponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoReponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.UserInfoReponse";
  }
  protected:
  explicit UserInfoReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.UserInfoReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit PROTOBUF_CONSTEXPR FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendInfo& from) {
    FriendInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendListRequest) */ {
 public:
  inline FriendListRequest() : FriendListRequest(nullptr) {}
  ~FriendListRequest() override;
  explicit PROTOBUF_CONSTEXPR FriendListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListRequest(const FriendListRequest& from);
  FriendListRequest(FriendListRequest&& from) noexcept
    : FriendListRequest() {
    *this = ::std::move(from);
  }

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
               &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendListRequest& a, FriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListRequest& from) {
    FriendListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.FriendListRequest";
  }
  protected:
  explicit FriendListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendListResponse) */ {
 public:
  inline FriendListResponse() : FriendListResponse(nullptr) {}
  ~FriendListResponse() override;
  explicit PROTOBUF_CONSTEXPR FriendListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListResponse(const FriendListResponse& from);
  FriendListResponse(FriendListResponse&& from) noexcept
    : FriendListResponse() {
    *this = ::std::move(from);
  }

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListResponse& operator=(FriendListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListResponse* internal_default_instance() {
    return reinterpret_cast<const FriendListResponse*>(
               &_FriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FriendListResponse& a, FriendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListResponse& from) {
    FriendListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.FriendListResponse";
  }
  protected:
  explicit FriendListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // repeated .ik_FriendService.FriendInfo friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::ik_FriendService::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ik_FriendService::FriendInfo >*
      mutable_friends();
  private:
  const ::ik_FriendService::FriendInfo& _internal_friends(int index) const;
  ::ik_FriendService::FriendInfo* _internal_add_friends();
  public:
  const ::ik_FriendService::FriendInfo& friends(int index) const;
  ::ik_FriendService::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ik_FriendService::FriendInfo >&
      friends() const;

  // bool is_success = 1;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ik_FriendService::FriendInfo > friends_;
    bool is_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendRequest& from) {
    AddFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.AddFriendRequest";
  }
  protected:
  explicit AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyidFieldNumber = 1,
    kFriendidFieldNumber = 2,
  };
  // int32 myid = 1;
  void clear_myid();
  int32_t myid() const;
  void set_myid(int32_t value);
  private:
  int32_t _internal_myid() const;
  void _internal_set_myid(int32_t value);
  public:

  // int32 friendid = 2;
  void clear_friendid();
  int32_t friendid() const;
  void set_friendid(int32_t value);
  private:
  int32_t _internal_friendid() const;
  void _internal_set_friendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t myid_;
    int32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.DeleteFriendRequest) */ {
 public:
  inline DeleteFriendRequest() : DeleteFriendRequest(nullptr) {}
  ~DeleteFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFriendRequest(const DeleteFriendRequest& from);
  DeleteFriendRequest(DeleteFriendRequest&& from) noexcept
    : DeleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRequest& operator=(const DeleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendRequest& operator=(DeleteFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRequest*>(
               &_DeleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteFriendRequest& a, DeleteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteFriendRequest& from) {
    DeleteFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_FriendService.DeleteFriendRequest";
  }
  protected:
  explicit DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyidFieldNumber = 1,
    kFriendidFieldNumber = 2,
  };
  // int32 myid = 1;
  void clear_myid();
  int32_t myid() const;
  void set_myid(int32_t value);
  private:
  int32_t _internal_myid() const;
  void _internal_set_myid(int32_t value);
  public:

  // int32 friendid = 2;
  void clear_friendid();
  int32_t friendid() const;
  void set_friendid(int32_t value);
  private:
  int32_t _internal_friendid() const;
  void _internal_set_friendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ik_FriendService.DeleteFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t myid_;
    int32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendService_2eproto;
};
// ===================================================================

class FriendServiceRpc_Stub;

class FriendServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendServiceRpc() {};
 public:
  virtual ~FriendServiceRpc();

  typedef FriendServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::FriendListRequest* request,
                       ::ik_FriendService::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::UserInfoRequest* request,
                       ::ik_FriendService::UserInfoReponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::AddFriendRequest* request,
                       ::PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::DeleteFriendRequest* request,
                       ::PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc);
};

class FriendServiceRpc_Stub : public FriendServiceRpc {
 public:
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendServiceRpc ------------------------------------------

  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::FriendListRequest* request,
                       ::ik_FriendService::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::UserInfoRequest* request,
                       ::ik_FriendService::UserInfoReponse* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::AddFriendRequest* request,
                       ::PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);
  void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ik_FriendService::DeleteFriendRequest* request,
                       ::PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoRequest

// int32 id = 1;
inline void UserInfoRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UserInfoRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoRequest.id)
  return _internal_id();
}
inline void UserInfoRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UserInfoRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoRequest.id)
}

// -------------------------------------------------------------------

// UserInfoReponse

// int32 id = 1;
inline void UserInfoReponse::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UserInfoReponse::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserInfoReponse::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoReponse.id)
  return _internal_id();
}
inline void UserInfoReponse::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UserInfoReponse::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoReponse.id)
}

// bytes name = 2;
inline void UserInfoReponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserInfoReponse::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoReponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoReponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoReponse.name)
}
inline std::string* UserInfoReponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ik_FriendService.UserInfoReponse.name)
  return _s;
}
inline const std::string& UserInfoReponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserInfoReponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoReponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoReponse::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.UserInfoReponse.name)
  return _impl_.name_.Release();
}
inline void UserInfoReponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.UserInfoReponse.name)
}

// -------------------------------------------------------------------

// FriendInfo

// int32 id = 1;
inline void FriendInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t FriendInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t FriendInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.id)
  return _internal_id();
}
inline void FriendInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void FriendInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.id)
}

// bytes name = 2;
inline void FriendInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.name)
}
inline std::string* FriendInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendInfo.name)
  return _s;
}
inline const std::string& FriendInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FriendInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.FriendInfo.name)
  return _impl_.name_.Release();
}
inline void FriendInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.FriendInfo.name)
}

// -------------------------------------------------------------------

// FriendListRequest

// int32 id = 1;
inline void FriendListRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t FriendListRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t FriendListRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListRequest.id)
  return _internal_id();
}
inline void FriendListRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void FriendListRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListRequest.id)
}

// -------------------------------------------------------------------

// FriendListResponse

// bool is_success = 1;
inline void FriendListResponse::clear_is_success() {
  _impl_.is_success_ = false;
}
inline bool FriendListResponse::_internal_is_success() const {
  return _impl_.is_success_;
}
inline bool FriendListResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.is_success)
  return _internal_is_success();
}
inline void FriendListResponse::_internal_set_is_success(bool value) {
  
  _impl_.is_success_ = value;
}
inline void FriendListResponse::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListResponse.is_success)
}

// repeated .ik_FriendService.FriendInfo friends = 2;
inline int FriendListResponse::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int FriendListResponse::friends_size() const {
  return _internal_friends_size();
}
inline void FriendListResponse::clear_friends() {
  _impl_.friends_.Clear();
}
inline ::ik_FriendService::FriendInfo* FriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendListResponse.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ik_FriendService::FriendInfo >*
FriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ik_FriendService.FriendListResponse.friends)
  return &_impl_.friends_;
}
inline const ::ik_FriendService::FriendInfo& FriendListResponse::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::ik_FriendService::FriendInfo& FriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.friends)
  return _internal_friends(index);
}
inline ::ik_FriendService::FriendInfo* FriendListResponse::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::ik_FriendService::FriendInfo* FriendListResponse::add_friends() {
  ::ik_FriendService::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:ik_FriendService.FriendListResponse.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ik_FriendService::FriendInfo >&
FriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:ik_FriendService.FriendListResponse.friends)
  return _impl_.friends_;
}

// -------------------------------------------------------------------

// AddFriendRequest

// int32 myid = 1;
inline void AddFriendRequest::clear_myid() {
  _impl_.myid_ = 0;
}
inline int32_t AddFriendRequest::_internal_myid() const {
  return _impl_.myid_;
}
inline int32_t AddFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.myid)
  return _internal_myid();
}
inline void AddFriendRequest::_internal_set_myid(int32_t value) {
  
  _impl_.myid_ = value;
}
inline void AddFriendRequest::set_myid(int32_t value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.myid)
}

// int32 friendid = 2;
inline void AddFriendRequest::clear_friendid() {
  _impl_.friendid_ = 0;
}
inline int32_t AddFriendRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline int32_t AddFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.friendid)
  return _internal_friendid();
}
inline void AddFriendRequest::_internal_set_friendid(int32_t value) {
  
  _impl_.friendid_ = value;
}
inline void AddFriendRequest::set_friendid(int32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.friendid)
}

// -------------------------------------------------------------------

// DeleteFriendRequest

// int32 myid = 1;
inline void DeleteFriendRequest::clear_myid() {
  _impl_.myid_ = 0;
}
inline int32_t DeleteFriendRequest::_internal_myid() const {
  return _impl_.myid_;
}
inline int32_t DeleteFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.myid)
  return _internal_myid();
}
inline void DeleteFriendRequest::_internal_set_myid(int32_t value) {
  
  _impl_.myid_ = value;
}
inline void DeleteFriendRequest::set_myid(int32_t value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.myid)
}

// int32 friendid = 2;
inline void DeleteFriendRequest::clear_friendid() {
  _impl_.friendid_ = 0;
}
inline int32_t DeleteFriendRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline int32_t DeleteFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.friendid)
  return _internal_friendid();
}
inline void DeleteFriendRequest::_internal_set_friendid(int32_t value) {
  
  _impl_.friendid_ = value;
}
inline void DeleteFriendRequest::set_friendid(int32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.friendid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_FriendService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FriendService_2eproto
