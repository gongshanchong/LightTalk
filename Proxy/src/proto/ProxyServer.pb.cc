// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProxyServer.proto

#include "ProxyServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ik_Proxy {
PROTOBUF_CONSTEXPR PoxryMessage::PoxryMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoxryMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoxryMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoxryMessageDefaultTypeInternal() {}
  union {
    PoxryMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoxryMessageDefaultTypeInternal _PoxryMessage_default_instance_;
PROTOBUF_CONSTEXPR PoxryResponse::PoxryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoxryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoxryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoxryResponseDefaultTypeInternal() {}
  union {
    PoxryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoxryResponseDefaultTypeInternal _PoxryResponse_default_instance_;
}  // namespace ik_Proxy
static ::_pb::Metadata file_level_metadata_ProxyServer_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ProxyServer_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ProxyServer_2eproto = nullptr;

const uint32_t TableStruct_ProxyServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryMessage, _impl_.request_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ik_Proxy::PoxryResponse, _impl_.response_msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ik_Proxy::PoxryMessage)},
  { 8, -1, -1, sizeof(::ik_Proxy::PoxryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ik_Proxy::_PoxryMessage_default_instance_._instance,
  &::ik_Proxy::_PoxryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ProxyServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ProxyServer.proto\022\010ik_Proxy\"1\n\014PoxryMe"
  "ssage\022\014\n\004type\030\001 \001(\014\022\023\n\013request_msg\030\002 \001(\014"
  "\"3\n\rPoxryResponse\022\014\n\004type\030\001 \001(\014\022\024\n\014respo"
  "nse_msg\030\002 \001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ProxyServer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ProxyServer_2eproto = {
    false, false, 141, descriptor_table_protodef_ProxyServer_2eproto,
    "ProxyServer.proto",
    &descriptor_table_ProxyServer_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ProxyServer_2eproto::offsets,
    file_level_metadata_ProxyServer_2eproto, file_level_enum_descriptors_ProxyServer_2eproto,
    file_level_service_descriptors_ProxyServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ProxyServer_2eproto_getter() {
  return &descriptor_table_ProxyServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ProxyServer_2eproto(&descriptor_table_ProxyServer_2eproto);
namespace ik_Proxy {

// ===================================================================

class PoxryMessage::_Internal {
 public:
};

PoxryMessage::PoxryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_Proxy.PoxryMessage)
}
PoxryMessage::PoxryMessage(const PoxryMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoxryMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.request_msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_msg().empty()) {
    _this->_impl_.request_msg_.Set(from._internal_request_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ik_Proxy.PoxryMessage)
}

inline void PoxryMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.request_msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PoxryMessage::~PoxryMessage() {
  // @@protoc_insertion_point(destructor:ik_Proxy.PoxryMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoxryMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.request_msg_.Destroy();
}

void PoxryMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoxryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_Proxy.PoxryMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.request_msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoxryMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes request_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoxryMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_Proxy.PoxryMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes request_msg = 2;
  if (!this->_internal_request_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_request_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_Proxy.PoxryMessage)
  return target;
}

size_t PoxryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_Proxy.PoxryMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // bytes request_msg = 2;
  if (!this->_internal_request_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoxryMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoxryMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoxryMessage::GetClassData() const { return &_class_data_; }


void PoxryMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoxryMessage*>(&to_msg);
  auto& from = static_cast<const PoxryMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_Proxy.PoxryMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_request_msg().empty()) {
    _this->_internal_set_request_msg(from._internal_request_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoxryMessage::CopyFrom(const PoxryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_Proxy.PoxryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoxryMessage::IsInitialized() const {
  return true;
}

void PoxryMessage::InternalSwap(PoxryMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_msg_, lhs_arena,
      &other->_impl_.request_msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PoxryMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProxyServer_2eproto_getter, &descriptor_table_ProxyServer_2eproto_once,
      file_level_metadata_ProxyServer_2eproto[0]);
}

// ===================================================================

class PoxryResponse::_Internal {
 public:
};

PoxryResponse::PoxryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ik_Proxy.PoxryResponse)
}
PoxryResponse::PoxryResponse(const PoxryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoxryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.response_msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_msg().empty()) {
    _this->_impl_.response_msg_.Set(from._internal_response_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ik_Proxy.PoxryResponse)
}

inline void PoxryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.response_msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PoxryResponse::~PoxryResponse() {
  // @@protoc_insertion_point(destructor:ik_Proxy.PoxryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoxryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.response_msg_.Destroy();
}

void PoxryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoxryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_Proxy.PoxryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.response_msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoxryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes response_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoxryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_Proxy.PoxryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes response_msg = 2;
  if (!this->_internal_response_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_response_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_Proxy.PoxryResponse)
  return target;
}

size_t PoxryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_Proxy.PoxryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // bytes response_msg = 2;
  if (!this->_internal_response_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoxryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoxryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoxryResponse::GetClassData() const { return &_class_data_; }


void PoxryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoxryResponse*>(&to_msg);
  auto& from = static_cast<const PoxryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ik_Proxy.PoxryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_response_msg().empty()) {
    _this->_internal_set_response_msg(from._internal_response_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoxryResponse::CopyFrom(const PoxryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_Proxy.PoxryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoxryResponse::IsInitialized() const {
  return true;
}

void PoxryResponse::InternalSwap(PoxryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_msg_, lhs_arena,
      &other->_impl_.response_msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PoxryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProxyServer_2eproto_getter, &descriptor_table_ProxyServer_2eproto_once,
      file_level_metadata_ProxyServer_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ik_Proxy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ik_Proxy::PoxryMessage*
Arena::CreateMaybeMessage< ::ik_Proxy::PoxryMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_Proxy::PoxryMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_Proxy::PoxryResponse*
Arena::CreateMaybeMessage< ::ik_Proxy::PoxryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ik_Proxy::PoxryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
